// <auto-generated />
using System;
using Backend.DatabaseAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200818154519_FiledNamingChanged")]
    partial class FiledNamingChanged
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Entities.Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExecutionDate");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MessageBgBg");

                    b.Property<string>("MessageEn");

                    b.Property<string>("MessageEnUs");

                    b.Property<string>("MessageUkUa");

                    b.Property<int?>("Type");

                    b.HasKey("Id");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("Backend.Entities.Analytic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryBgBg");

                    b.Property<string>("CategoryEn");

                    b.Property<string>("CategoryEnUs");

                    b.Property<string>("CategoryUkUa");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameBgBg");

                    b.Property<string>("NameEn");

                    b.Property<string>("NameEnUs");

                    b.Property<string>("NameUkUa");

                    b.Property<string>("SqlQuery");

                    b.HasKey("Id");

                    b.ToTable("Analytic");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CategoryBgBg = "Употреба",
                            CategoryEnUs = "Usage",
                            CategoryUkUa = "Використання",
                            NameBgBg = "Потребители",
                            NameEnUs = "Users",
                            NameUkUa = "Користувачі",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[AspNetUsers]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CategoryBgBg = "Употреба",
                            CategoryEnUs = "Usage",
                            CategoryUkUa = "Використання",
                            NameBgBg = "Потребители (без ДР)",
                            NameEnUs = "Users (no DOB)",
                            NameUkUa = "Користувачі (без ДН)",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[AspNetUsers] WHERE DateOfBirth is NULL"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CategoryBgBg = "Употреба",
                            CategoryEnUs = "Usage",
                            CategoryUkUa = "Використання",
                            NameBgBg = "Потребители (непотвърден имейл)",
                            NameEnUs = "Users (unconfirmed email)",
                            NameUkUa = "Користувачі (не підтвертджений емейл)",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[AspNetUsers] WHERE EmailConfirmed = 0"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            CategoryBgBg = "Употреба",
                            CategoryEnUs = "Usage",
                            CategoryUkUa = "Використання",
                            NameBgBg = "Потребители (няма пола по рождение)",
                            NameEnUs = "Users (no sex at birth)",
                            NameUkUa = "Користувачі (немає статі при народженні)",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[AspNetUsers] WHERE SexAtBirth is NUll"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            CategoryBgBg = "Употреба",
                            CategoryEnUs = "Usage",
                            CategoryUkUa = "Використання",
                            NameBgBg = "Потребители (няма аватар)",
                            NameEnUs = "Users (no avatar)",
                            NameUkUa = "Користувачі (немає аватару)",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[AspNetUsers] WHERE AvatarId is NUll"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            CategoryBgBg = "Новини",
                            CategoryEnUs = "Newsfeed",
                            CategoryUkUa = "Новини",
                            NameBgBg = "Статии",
                            NameEnUs = "Articles",
                            NameUkUa = "Статті",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[News]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            CategoryBgBg = "Новини",
                            CategoryEnUs = "Newsfeed",
                            CategoryUkUa = "Новини",
                            NameBgBg = "Обича",
                            NameEnUs = "Likes",
                            NameUkUa = "Вподобання",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM (Select Distinct NewsId FROM [dbo].[NewsLikesAndComments]) AS LIKES"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            CategoryBgBg = "Енциклопедия",
                            CategoryEnUs = "Encyclopedia",
                            CategoryUkUa = "Енциклопедія",
                            NameBgBg = "Оригинални записи",
                            NameEnUs = "Original entries",
                            NameUkUa = "Оригінальні записи",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[EncyclopediaEntity] WHERE (OriginalEntryId is NULL or OriginalEntryId = '')"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            CategoryBgBg = "Табло",
                            CategoryEnUs = "Dashboard",
                            CategoryUkUa = "Панель",
                            NameBgBg = "Метрика",
                            NameEnUs = "Metrics",
                            NameUkUa = "Метрики",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[Metric]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            CategoryBgBg = "Употреба",
                            CategoryEnUs = "Usage",
                            CategoryUkUa = "Використання",
                            NameBgBg = "ЕАП (ежедневно активни потребители)",
                            NameEnUs = "DAU (daily active users)",
                            NameUkUa = "АКД (активні корситувачі за день)",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM (Select Distinct UserId FROM [dbo].[AnalyticUserSignIn] WHERE CAST(SignInDatetime as date) = CAST(getdate() as date)) AS LOGINS"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            CategoryBgBg = "Употреба",
                            CategoryEnUs = "Usage",
                            CategoryUkUa = "Використання",
                            NameBgBg = "ПАП (почасово активни потребители)",
                            NameEnUs = "HAU (hourly active users)",
                            NameUkUa = "АКГ (активні корситувачі за годину)",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM (Select Distinct UserId FROM [dbo].[AnalyticUserSignIn] WHERE SignInDatetime > DATEADD(HOUR, -1, GETDATE())) AS LOGINS"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            CategoryBgBg = "Новини",
                            CategoryEnUs = "Newsfeed",
                            CategoryUkUa = "Новини",
                            NameBgBg = "Статии (с харесвания)",
                            NameEnUs = "Articles (with likes)",
                            NameUkUa = "Статті (з вподобанням)",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[NewsLikesAndComments]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            CategoryBgBg = "Енциклопедия",
                            CategoryEnUs = "Encyclopedia",
                            CategoryUkUa = "Енциклопедія",
                            NameBgBg = "Все записи",
                            NameEnUs = "All entries",
                            NameUkUa = "Всі записи",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[EncyclopediaEntity]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            CategoryBgBg = "Енциклопедия",
                            CategoryEn = "Encyclopedia",
                            CategoryEnUs = "Encyclopedia",
                            CategoryUkUa = "Енциклопедія",
                            NameBgBg = "Лекарства (всі)",
                            NameEn = "Medicines (all)",
                            NameEnUs = "Medicines (all)",
                            NameUkUa = "Ліки (всі)",
                            SqlQuery = "SELECT COUNT (*) AS Value FROM [dbo].[EncyclopediaMedicineEntity]"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            CategoryBgBg = "Енциклопедия",
                            CategoryEn = "Encyclopedia",
                            CategoryEnUs = "Encyclopedia",
                            CategoryUkUa = "Енциклопедія",
                            NameBgBg = "Лекарства (en)",
                            NameEn = "Medicines (en)",
                            NameEnUs = "Medicines (en)",
                            NameUkUa = "Ліки (en)",
                            SqlQuery = "SELECT COUNT(*) AS Value FROM [dbo].[EncyclopediaMedicineEntity] WHERE TitleEn IS NOT null"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            CategoryBgBg = "Енциклопедия",
                            CategoryEn = "Encyclopedia",
                            CategoryEnUs = "Encyclopedia",
                            CategoryUkUa = "Енциклопедія",
                            NameBgBg = "Лекарства (en-us)",
                            NameEn = "Medicines (en-us)",
                            NameEnUs = "Medicines (en-us)",
                            NameUkUa = "Ліки (en-us)",
                            SqlQuery = "SELECT COUNT(*) AS Value FROM [dbo].[EncyclopediaMedicineEntity] WHERE TitleEnUs IS NOT null"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            CategoryBgBg = "Енциклопедия",
                            CategoryEn = "Encyclopedia",
                            CategoryEnUs = "Encyclopedia",
                            CategoryUkUa = "Енциклопедія",
                            NameBgBg = "Лекарства (bg-bg)",
                            NameEn = "Medicines (bg-bg)",
                            NameEnUs = "Medicines (bg-bg)",
                            NameUkUa = "Ліки (bg-bg)",
                            SqlQuery = "SELECT COUNT(*) AS Value FROM [dbo].[EncyclopediaMedicineEntity] WHERE TitleBgBg IS NOT null"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            CategoryBgBg = "Енциклопедия",
                            CategoryEn = "Encyclopedia",
                            CategoryEnUs = "Encyclopedia",
                            CategoryUkUa = "Енциклопедія",
                            NameBgBg = "Лекарства (uk-ua)",
                            NameEn = "Medicines (uk-ua)",
                            NameEnUs = "Medicines (uk-ua)",
                            NameUkUa = "Ліки (uk-ua)",
                            SqlQuery = "SELECT COUNT(*) AS Value FROM [dbo].[EncyclopediaMedicineEntity] WHERE TitleUkUa IS NOT null"
                        });
                });

            modelBuilder.Entity("Backend.Entities.AnalyticData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnalyticId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AnalyticId");

                    b.ToTable("AnalyticData");
                });

            modelBuilder.Entity("Backend.Entities.AnalyticUserSignIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AnonymousId");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SessionDurationInSeconds");

                    b.Property<DateTime?>("SignInDatetime");

                    b.Property<int>("Status");

                    b.Property<string>("UserAgent");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AnalyticUserSignIn");
                });

            modelBuilder.Entity("Backend.Entities.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<DateTime>("ActionDate");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("KeyValues");

                    b.Property<string>("NewValues");

                    b.Property<string>("OldValues");

                    b.Property<string>("TableName");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("Backend.Entities.ChartMetric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AnnotateLastEntry");

                    b.Property<bool>("AnnotateMaxEntry");

                    b.Property<bool>("AnnotateMinEntry");

                    b.Property<string>("BackgroundColor");

                    b.Property<Guid>("ChartId");

                    b.Property<float?>("Goal");

                    b.Property<float?>("GoalMax");

                    b.Property<float?>("GoalMin");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MetricId");

                    b.Property<bool>("ShowGoalLines");

                    b.Property<string>("Stroke");

                    b.Property<string>("YMax");

                    b.Property<string>("YMin");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.HasIndex("ChartId", "MetricId")
                        .IsUnique();

                    b.ToTable("ChartMetric");
                });

            modelBuilder.Entity("Backend.Entities.ChronicCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<Guid>("EncyclopediaId");

                    b.Property<int?>("GenderApplicability");

                    b.Property<float>("HealthIndexAmount");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EncyclopediaId");

                    b.ToTable("ChronicCondition");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000050"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000051"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000052"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000054"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000055"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000056"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000057"),
                            HealthIndexAmount = 4f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000058"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000059"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000060"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 0f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000061"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000062"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000063"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000064"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000065"),
                            HealthIndexAmount = 4f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000066"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Category = 4,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000067"),
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Category = 4,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000068"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Category = 4,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000069"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Category = 4,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000070"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            Category = 4,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000071"),
                            HealthIndexAmount = 0f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            Category = 4,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 0f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            Category = 5,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000072"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            Category = 5,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000073"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            Category = 5,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000074"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            Category = 5,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            Category = 5,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000076"),
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            Category = 4,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000078"),
                            HealthIndexAmount = 8f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000035"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000080"),
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000036"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000081"),
                            HealthIndexAmount = 8f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000038"),
                            Category = 10,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000083"),
                            GenderApplicability = 2,
                            HealthIndexAmount = 5f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000039"),
                            Category = 10,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000084"),
                            GenderApplicability = 2,
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000042"),
                            Category = 7,
                            EncyclopediaId = new Guid("8e5aac16-1237-4e18-8f58-000000005547"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000043"),
                            Category = 7,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000087"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000044"),
                            Category = 7,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000088"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000045"),
                            Category = 7,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000046"),
                            Category = 4,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000089"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000047"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000090"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000048"),
                            Category = 5,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000091"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000050"),
                            Category = 9,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000092"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000051"),
                            Category = 9,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000093"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000052"),
                            Category = 9,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000094"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000053"),
                            Category = 9,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000095"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000054"),
                            Category = 9,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000096"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000056"),
                            Category = 9,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000057"),
                            Category = 10,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000098"),
                            GenderApplicability = 2,
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000058"),
                            Category = 10,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000099"),
                            GenderApplicability = 2,
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000059"),
                            Category = 10,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000100"),
                            GenderApplicability = 2,
                            HealthIndexAmount = 0f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000060"),
                            Category = 10,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000101"),
                            GenderApplicability = 2,
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000061"),
                            Category = 10,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            GenderApplicability = 2,
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000062"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000102"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000063"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000103"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000064"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000104"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000065"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000105"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000066"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000106"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000067"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000107"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000068"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000108"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000069"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000109"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000070"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000071"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000110"),
                            HealthIndexAmount = 4f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000072"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000111"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000073"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000112"),
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000074"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000113"),
                            HealthIndexAmount = 4f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000075"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000114"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000076"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000115"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000077"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000116"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000078"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000117"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000079"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000118"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000080"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000081"),
                            Category = 13,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000119"),
                            HealthIndexAmount = 4f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000082"),
                            Category = 13,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000120"),
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000083"),
                            Category = 17,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000121"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000084"),
                            Category = 13,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000122"),
                            HealthIndexAmount = 4f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000085"),
                            Category = 17,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000123"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000086"),
                            Category = 20,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000124"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000087"),
                            Category = 14,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000125"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000088"),
                            Category = 14,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000126"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000089"),
                            Category = 18,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000127"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000090"),
                            Category = 18,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000128"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000091"),
                            Category = 18,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000129"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000092"),
                            Category = 18,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000130"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000093"),
                            Category = 15,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000131"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000094"),
                            Category = 15,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000132"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000095"),
                            Category = 15,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000133"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000096"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000134"),
                            HealthIndexAmount = 4f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000097"),
                            Category = 15,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000135"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000098"),
                            Category = 15,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000136"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000099"),
                            Category = 15,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000137"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            Category = 15,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000138"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            Category = 15,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000181"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000182"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000183"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000184"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000106"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000185"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000107"),
                            Category = 4,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000186"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000108"),
                            Category = 5,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000187"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000109"),
                            Category = 7,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000188"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000110"),
                            Category = 7,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000189"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000111"),
                            Category = 7,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000190"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000112"),
                            Category = 7,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000191"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000113"),
                            Category = 7,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000192"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000114"),
                            Category = 7,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000193"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000115"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000194"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000116"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000195"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000117"),
                            Category = 14,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000196"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000118"),
                            Category = 14,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000197"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000119"),
                            Category = 19,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000198"),
                            GenderApplicability = 1,
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000120"),
                            Category = 19,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000199"),
                            GenderApplicability = 1,
                            HealthIndexAmount = 5f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000121"),
                            Category = 19,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000200"),
                            GenderApplicability = 1,
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000122"),
                            Category = 19,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            GenderApplicability = 1,
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000123"),
                            Category = 20,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000201"),
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000124"),
                            Category = 20,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000202"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000125"),
                            Category = 20,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000203"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000126"),
                            Category = 5,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000206"),
                            HealthIndexAmount = 4f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000127"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000211"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000128"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000212"),
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000129"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000219"),
                            HealthIndexAmount = 8f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000130"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000220"),
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000131"),
                            Category = 11,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000223"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000132"),
                            Category = 10,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000226"),
                            GenderApplicability = 2,
                            HealthIndexAmount = 6f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000133"),
                            Category = 12,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000227"),
                            HealthIndexAmount = 8f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000134"),
                            Category = 12,
                            EncyclopediaId = new Guid("b852b993-afa6-4aa9-a4a5-000000005052"),
                            HealthIndexAmount = 1f
                        });
                });

            modelBuilder.Entity("Backend.Entities.ControlCheckup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChronicConditions");

                    b.Property<string>("FamilyHistory");

                    b.Property<string>("FrequencyBgBg");

                    b.Property<string>("FrequencyEn");

                    b.Property<string>("FrequencyEnUs");

                    b.Property<string>("FrequencyUkUa");

                    b.Property<int>("Gender");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxAge");

                    b.Property<int?>("MinAge");

                    b.Property<string>("ProfilacticCheckupBgBg");

                    b.Property<string>("ProfilacticCheckupEn");

                    b.Property<string>("ProfilacticCheckupEnUs");

                    b.Property<string>("ProfilacticCheckupUkUa");

                    b.Property<string>("PropertyValues");

                    b.Property<string>("UserProperty");

                    b.HasKey("Id");

                    b.ToTable("ControlCheckup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            FrequencyEn = "5-10 years",
                            FrequencyEnUs = "5-10 years",
                            FrequencyUkUa = "5-10 років",
                            Gender = 3,
                            MinAge = 12,
                            ProfilacticCheckupEn = "Depression screen",
                            ProfilacticCheckupEnUs = "Depression screen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            FrequencyEn = "Every 2 years",
                            FrequencyEnUs = "Every 2 years",
                            FrequencyUkUa = "кожні 2 роки",
                            Gender = 3,
                            MinAge = 12,
                            ProfilacticCheckupEn = "General exam (including BMI, blood pressure; children - height, weight, head circumfrerence, psychologic, etc.)",
                            ProfilacticCheckupEnUs = "General exam (including BMI, blood pressure; children - height, weight, head circumfrerence, psychologic, etc.)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            FrequencyEn = "Every 5 years",
                            FrequencyEnUs = "Every 5 years",
                            FrequencyUkUa = "кожні 5 років",
                            Gender = 3,
                            MaxAge = 70,
                            MinAge = 40,
                            ProfilacticCheckupEn = "Diabetes type II screen and glucose tollerance",
                            ProfilacticCheckupEnUs = "Diabetes type II screen and glucose tollerance"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ChronicConditions = "00000000-0000-0000-0000-000000000028,00000000-0000-0000-0000-000000000071,00000000-0000-0000-0000-000000000017",
                            FrequencyEn = "once",
                            FrequencyEnUs = "Once",
                            FrequencyUkUa = "разово",
                            Gender = 3,
                            ProfilacticCheckupEn = "Aspirin consultation",
                            ProfilacticCheckupEnUs = "Aspirin consultation"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            FrequencyEn = "Every 3 years",
                            FrequencyEnUs = "Every 3 years",
                            FrequencyUkUa = "кожні 3 роки",
                            Gender = 2,
                            MaxAge = 65,
                            MinAge = 12,
                            ProfilacticCheckupEn = "Cervical cancer screen (PAP test)",
                            ProfilacticCheckupEnUs = "Cervical cancer screen (PAP test)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            FrequencyEn = "Every 5 years",
                            FrequencyEnUs = "Every 5 years",
                            FrequencyUkUa = "кожні 5 років",
                            Gender = 2,
                            MaxAge = 65,
                            MinAge = 30,
                            ProfilacticCheckupEn = "HPV DNA test with PAP test",
                            ProfilacticCheckupEnUs = "HPV DNA test with PAP test"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            FrequencyEn = "Every 2 years",
                            FrequencyEnUs = "Every 2 years",
                            FrequencyUkUa = "кожні 2 роки",
                            Gender = 2,
                            ProfilacticCheckupEn = "Chlamydia screen, HIV-, Hepatitis B, Hepatitis C",
                            ProfilacticCheckupEnUs = "Chlamydia screen, HIV-, Hepatitis B, Hepatitis C",
                            PropertyValues = "1",
                            UserProperty = "HighPromiscuity"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            FrequencyEn = "Every 2 years",
                            FrequencyEnUs = "Every 2 years",
                            FrequencyUkUa = "кожні 2 роки",
                            Gender = 2,
                            MaxAge = 24,
                            ProfilacticCheckupEn = "Chlamydia screen",
                            ProfilacticCheckupEnUs = "Chlamydia screen",
                            PropertyValues = "1",
                            UserProperty = "SexualActive"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            FrequencyEn = "Once",
                            FrequencyEnUs = "Once",
                            FrequencyUkUa = "разово",
                            Gender = 3,
                            MaxAge = 21,
                            MinAge = 18,
                            ProfilacticCheckupEn = "cholesterol/lipid disorder screen",
                            ProfilacticCheckupEnUs = "cholesterol/lipid disorder screen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            ChronicConditions = "00000000-0000-0000-0000-000000000017,00000000-0000-0000-0000-000000000027,00000000-0000-0000-0000-000000000071",
                            FamilyHistory = "00000000-0000-0000-0000-000000000003",
                            FrequencyEn = "Once",
                            FrequencyEnUs = "Once",
                            FrequencyUkUa = "разово",
                            Gender = 3,
                            MaxAge = 16,
                            MinAge = 12,
                            ProfilacticCheckupEn = "cholesterol/lipid disorder screen",
                            ProfilacticCheckupEnUs = "cholesterol/lipid disorder screen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            FrequencyEn = "Every 2 years",
                            FrequencyEnUs = "Every 2 years",
                            FrequencyUkUa = "кожні 2 роки",
                            Gender = 1,
                            MaxAge = 45,
                            MinAge = 35,
                            ProfilacticCheckupEn = "cholesterol/lipid disorder screen",
                            ProfilacticCheckupEnUs = "cholesterol/lipid disorder screen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            ChronicConditions = "00000000-0000-0000-0000-000000000017,00000000-0000-0000-0000-000000000027,00000000-0000-0000-0000-000000000071",
                            FamilyHistory = "00000000-0000-0000-0000-000000000003",
                            FrequencyEn = "Every 2 years",
                            FrequencyEnUs = "Every 2 years",
                            FrequencyUkUa = "кожні 2 роки",
                            Gender = 3,
                            MinAge = 20,
                            ProfilacticCheckupEn = "cholesterol/lipid disorder screen",
                            ProfilacticCheckupEnUs = "cholesterol/lipid disorder screen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            FrequencyEn = "Every 2 years",
                            FrequencyEnUs = "Every 2 years",
                            FrequencyUkUa = "кожні 2 роки",
                            Gender = 2,
                            MinAge = 45,
                            ProfilacticCheckupEn = "cholesterol/lipid disorder screen",
                            ProfilacticCheckupEnUs = "cholesterol/lipid disorder screen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            ChronicConditions = "00000000-0000-0000-0000-000000000069",
                            FamilyHistory = "00000000-0000-0000-0000-000000000006",
                            FrequencyEn = "Yearly",
                            FrequencyEnUs = "Yearly",
                            FrequencyUkUa = "щорічно",
                            Gender = 3,
                            MinAge = 50,
                            ProfilacticCheckupEn = "Fetal occult blood test",
                            ProfilacticCheckupEnUs = "Fetal occult blood test"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            ChronicConditions = "00000000-0000-0000-0000-000000000069",
                            FamilyHistory = "00000000-0000-0000-0000-000000000006",
                            FrequencyEn = "Every 5 years",
                            FrequencyEnUs = "Every 5 years",
                            FrequencyUkUa = "кожні 5 років",
                            Gender = 3,
                            MinAge = 50,
                            ProfilacticCheckupEn = "Sigmoidoscopy",
                            ProfilacticCheckupEnUs = "Sigmoidoscopy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            ChronicConditions = "00000000-0000-0000-0000-000000000069",
                            FamilyHistory = "00000000-0000-0000-0000-000000000006",
                            FrequencyEn = "Every 10 years",
                            FrequencyEnUs = "Every 10 years",
                            FrequencyUkUa = "кожні 10 років",
                            Gender = 3,
                            MinAge = 50,
                            ProfilacticCheckupEn = "Colonoscopy",
                            ProfilacticCheckupEnUs = "Colonoscopy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            ChronicConditions = "00000000-0000-0000-0000-000000000069",
                            FamilyHistory = "00000000-0000-0000-0000-000000000006",
                            FrequencyEn = "Every 5 years",
                            FrequencyEnUs = "Every 5 years",
                            FrequencyUkUa = "кожні 5 років",
                            Gender = 3,
                            MinAge = 50,
                            ProfilacticCheckupEn = "Virtual (CT) colonoscopy",
                            ProfilacticCheckupEnUs = "Virtual (CT) colonoscopy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            ChronicConditions = "00000000-0000-0000-0000-000000000069",
                            FamilyHistory = "00000000-0000-0000-0000-000000000006",
                            FrequencyEn = "Every 3 years",
                            FrequencyEnUs = "Every 3 years",
                            FrequencyUkUa = "кожні 3 роки",
                            Gender = 3,
                            MinAge = 50,
                            ProfilacticCheckupEn = "Stool-based DNA test",
                            ProfilacticCheckupEnUs = "Stool-based DNA test"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000034"),
                            FrequencyEn = "Once during pregnancy",
                            FrequencyEnUs = "Once during pregnancy",
                            FrequencyUkUa = "разово під час вагітності",
                            Gender = 2,
                            ProfilacticCheckupEn = "Gestational diabetes screen (24-28 week)",
                            ProfilacticCheckupEnUs = "Gestational diabetes screen (24-28 week)",
                            PropertyValues = "1",
                            UserProperty = "CurrentlyPregnant"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000035"),
                            FrequencyEn = "Once during pregnancy",
                            FrequencyEnUs = "Once during pregnancy",
                            FrequencyUkUa = "разово під час вагітності",
                            Gender = 2,
                            ProfilacticCheckupEn = "Bacteriuria screening (12-16 week)",
                            ProfilacticCheckupEnUs = "Bacteriuria screening (12-16 week)",
                            PropertyValues = "1",
                            UserProperty = "CurrentlyPregnant"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000036"),
                            FrequencyEn = "Once during pregnancy",
                            FrequencyEnUs = "Once during pregnancy",
                            FrequencyUkUa = "разово під час вагітності",
                            Gender = 2,
                            ProfilacticCheckupEn = "Breastfeeding counseling (end of pregnancy)",
                            ProfilacticCheckupEnUs = "Breastfeeding counseling (end of pregnancy)",
                            PropertyValues = "1",
                            UserProperty = "CurrentlyPregnant"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000037"),
                            FrequencyEn = "Once during pregnancy",
                            FrequencyEnUs = "Once during pregnancy",
                            FrequencyUkUa = "разово під час вагітності",
                            Gender = 2,
                            ProfilacticCheckupEn = "Rh-incompatibility test (beginning)",
                            ProfilacticCheckupEnUs = "Rh-incompatibility test (beginning)",
                            PropertyValues = "1",
                            UserProperty = "CurrentlyPregnant"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000038"),
                            FrequencyEn = "Once during pregnancy",
                            FrequencyEnUs = "Once during pregnancy",
                            FrequencyUkUa = "разово під час вагітності",
                            Gender = 2,
                            ProfilacticCheckupEn = "Hepatitis B, C, HIV, syphilis screening (beginning)",
                            ProfilacticCheckupEnUs = "Hepatitis B, C, HIV, syphilis screening (beginning)",
                            PropertyValues = "1",
                            UserProperty = "CurrentlyPregnant"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000039"),
                            FrequencyEn = "Multiple times during pregnancy",
                            FrequencyEnUs = "Multiple times during pregnancy",
                            FrequencyUkUa = "багаторазово під час вагітності",
                            Gender = 2,
                            ProfilacticCheckupEn = "Routine checkups (once monthly (weeks 4-28); twice monthly (weeks 28-36); weekly (>36 week))",
                            ProfilacticCheckupEnUs = "Routine checkups (once monthly (weeks 4-28); twice monthly (weeks 28-36); weekly (>36 week))",
                            PropertyValues = "1",
                            UserProperty = "CurrentlyPregnant"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000040"),
                            FrequencyEn = "Every 2 years",
                            FrequencyEnUs = "Every 2 years",
                            FrequencyUkUa = "кожні 2 роки",
                            Gender = 2,
                            MaxAge = 54,
                            MinAge = 40,
                            ProfilacticCheckupEn = "Mammogram and breast check",
                            ProfilacticCheckupEnUs = "Mammogram and breast check"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000041"),
                            FrequencyEn = "Yearly",
                            FrequencyEnUs = "Yearly",
                            FrequencyUkUa = "щорічно",
                            Gender = 2,
                            MinAge = 55,
                            ProfilacticCheckupEn = "Mammogram and breast check",
                            ProfilacticCheckupEnUs = "Mammogram and breast check"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000042"),
                            FamilyHistory = "00000000-0000-0000-0000-000000000021,00000000-0000-0000-0000-000000000009",
                            FrequencyEn = "Yearly",
                            FrequencyEnUs = "Yearly",
                            FrequencyUkUa = "щорічно",
                            Gender = 2,
                            MinAge = 30,
                            ProfilacticCheckupEn = "Mammogram and MRI",
                            ProfilacticCheckupEnUs = "Mammogram and MRI"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000043"),
                            FamilyHistory = "00000000-0000-0000-0000-000000000021,00000000-0000-0000-0000-000000000009,00000000-0000-0000-0000-000000000022",
                            FrequencyEn = "Once",
                            FrequencyEnUs = "Once",
                            FrequencyUkUa = "разово",
                            Gender = 3,
                            MaxAge = 30,
                            MinAge = 18,
                            ProfilacticCheckupEn = "BRCA1/BRCA2 test",
                            ProfilacticCheckupEnUs = "BRCA1/BRCA2 test"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000044"),
                            ChronicConditions = "00000000-0000-0000-0000-000000000038",
                            FrequencyEn = "Once",
                            FrequencyEnUs = "Once",
                            FrequencyUkUa = "разово",
                            Gender = 3,
                            MaxAge = 45,
                            ProfilacticCheckupEn = "BRCA1/BRCA2 test",
                            ProfilacticCheckupEnUs = "BRCA1/BRCA2 test"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000045"),
                            FrequencyEn = "Every 15 years",
                            FrequencyEnUs = "Every 15 years",
                            FrequencyUkUa = "кожні 15 років",
                            Gender = 3,
                            MinAge = 65,
                            ProfilacticCheckupEn = "Bone density measurement",
                            ProfilacticCheckupEnUs = "Bone density measurement"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000046"),
                            FrequencyEn = "Once",
                            FrequencyEnUs = "Once",
                            FrequencyUkUa = "разово",
                            Gender = 2,
                            ProfilacticCheckupEn = "Contraception counseling",
                            ProfilacticCheckupEnUs = "Contraception counseling",
                            PropertyValues = "1",
                            UserProperty = "SexualActive"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000047"),
                            FrequencyEn = "Every 2 years",
                            FrequencyEnUs = "Every 2 years",
                            FrequencyUkUa = "кожні 2 роки",
                            Gender = 3,
                            MaxAge = 80,
                            MinAge = 55,
                            ProfilacticCheckupEn = "Low-dose CT",
                            ProfilacticCheckupEnUs = "Low-dose CT",
                            PropertyValues = "2,3,4,5",
                            UserProperty = "TobaccoConsumption"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000048"),
                            FrequencyEn = "Every 5 years",
                            FrequencyEnUs = "Every 5 years",
                            FrequencyUkUa = "кожні 5 років",
                            Gender = 1,
                            MaxAge = 75,
                            MinAge = 65,
                            ProfilacticCheckupEn = "Ultrasound abdominal aneurism screen",
                            ProfilacticCheckupEnUs = "Ultrasound abdominal aneurism screen",
                            PropertyValues = "2,3,4",
                            UserProperty = "TobaccoConsumption"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000049"),
                            FrequencyEn = "Every 2 years",
                            FrequencyEnUs = "Every 2 years",
                            FrequencyUkUa = "кожні 2 роки",
                            Gender = 3,
                            MinAge = 35,
                            ProfilacticCheckupEn = "Melanoma screen",
                            ProfilacticCheckupEnUs = "Melanoma screen"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000050"),
                            FrequencyEn = "Yearly",
                            FrequencyEnUs = "Yearly",
                            FrequencyUkUa = "щорічно",
                            Gender = 1,
                            MinAge = 45,
                            ProfilacticCheckupEn = "Prostate cancer screening - manual, ultrasound and optionally PSA",
                            ProfilacticCheckupEnUs = "Prostate cancer screening - manual, ultrasound and optionally PSA"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<Guid>("FieldId");

                    b.Property<string>("FileName");

                    b.Property<string>("FileSize");

                    b.Property<string>("FileUri");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalFileName");

                    b.Property<int>("Type");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Backend.Entities.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BodySystemId");

                    b.Property<string>("DescriptionBgBg");

                    b.Property<string>("DescriptionEn");

                    b.Property<string>("DescriptionEnUs");

                    b.Property<string>("DescriptionUkUa");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalEntryId");

                    b.Property<string>("TitleBgBg");

                    b.Property<string>("TitleEn");

                    b.Property<string>("TitleEnUs");

                    b.Property<string>("TitleUkUa");

                    b.HasKey("Id");

                    b.ToTable("EncyclopediaMedicineEntity");
                });

            modelBuilder.Entity("Backend.Entities.EncyclopediaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BodySystemId");

                    b.Property<string>("DescriptionBgBg");

                    b.Property<string>("DescriptionEn");

                    b.Property<string>("DescriptionEnUs");

                    b.Property<string>("DescriptionUkUa");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OriginalEntryId");

                    b.Property<string>("TitleBgBg");

                    b.Property<string>("TitleEn");

                    b.Property<string>("TitleEnUs");

                    b.Property<string>("TitleUkUa");

                    b.HasKey("Id");

                    b.ToTable("EncyclopediaEntity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000050"),
                            DescriptionEnUs = "The abbreviation COPD (chronic obstructive pulmonary (lung) disease, aka COLD) indicates a group of various lung diseases, including chronic bronchitis (chronic inflammation of the airways) and emphysema (reduction of the number of airsacks in the lungs). General symptoms include continuous coughing, shortness of breath and expectoration (ejecting phlegm or mucus during coughing).",
                            TitleEnUs = "Chronic bronchitis and emphysema"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000051"),
                            TitleEnUs = "Lung cancer remission",
                            TitleUkUa = "Ремісія легенів"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000052"),
                            DescriptionEnUs = "A long-term disease of the airways, leading to attacks of wheezing, coughing, chest tightness, and shortness of breath. Outside such attacks, breathing is normal. Often it is manifested in childhood and has allergic cause.",
                            TitleEnUs = "Asthma",
                            TitleUkUa = "Астма"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000053"),
                            TitleEnUs = "Other",
                            TitleUkUa = "Інше"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000054"),
                            DescriptionEnUs = "When kidneys fail completely, our blood accumulates large amounts of garbage products, which are normalle removed with the urine through the kidneys. In this case, apart from translantation, only dialysis can save life. Dialysis is a process of blood cleaning performed either by regular blood processing through a dialysis machine or (rarely) by pumping a dialysis fluid in and out of the abdominal cavity.",
                            TitleEnUs = "Kidney failure"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000055"),
                            DescriptionEnUs = "Chronic inflammation of the kidneys, leading to kindey failure.",
                            TitleEnUs = "Kidney infections"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000056"),
                            DescriptionEnUs = "Advanced dysfunction of the kidneys due to inflammation, infection, diabetes, high-blood pressure, medicines, genetic disease and others. The level of kidney failure is determined routinely by the level of creatinine. Stage 5 requires dialysis.",
                            TitleEnUs = "Chronic kidney disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000057"),
                            DescriptionEnUs = "A genetic disease, leading to formation of large cysts in the kidneys and leading to kidney failure.",
                            TitleEnUs = "Polycystic kidney disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000058"),
                            DescriptionEnUs = "They (a.k.a. urolithiasis) are solid stone-like structures, formed in the urine-draining parts of the kidney. They can be transported wonstream the urinary flow to the urinary bladder and sometimes leave the body spontaneously with the urine (seldom).",
                            TitleEnUs = "Kidney stones"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000059"),
                            DescriptionEnUs = "Chronic inflammation of the urinary bladder with symptoms of recurrent pain and/or frequent urge to urinate.",
                            TitleEnUs = "Bladder infections"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000060"),
                            TitleEnUs = "Removed kidney",
                            TitleUkUa = "Видалена нирка"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000061"),
                            DescriptionEnUs = "Disturbances in the regular rhythmic function of the heart. Most commonly, it includes atrial fibrillation, abbreviated often as Afib.",
                            TitleEnUs = "Artial fibrillation (Afib)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000062"),
                            DescriptionEnUs = "Diseases of the heart valves, which can be harmless (heart murmur, heart noise), but can be also serious.",
                            TitleEnUs = "Valve disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000063"),
                            DescriptionEnUs = "Elevation of the blood pressure above 130/80. Even if blood pressure remains normal most of the time, individually elevated values (when not exercising) speak about high blood pressure disease.",
                            TitleEnUs = "High blood pressure"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000064"),
                            DescriptionEnUs = "Angina, a.k.a. angina pectoris, is the feeling of chest pain or pressure, usually due to not enough blood flow to the heart muscle.",
                            TitleEnUs = "Angina",
                            TitleUkUa = "Ангіна"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000065"),
                            DescriptionEnUs = "The most serious disease of the heart is the myocardial infaction (a.k.a. \"heart attack\"). Here, parts of the muscle die due to disruption of their essential blood supply. The heart itself utilizes for its own needs approx. 10% of the whole blood pumped through it. This blood flow disruption occurs most ofen due to obstruction of the coronary arteries as a result of atherosclerosis and/or vessel cramp.",
                            TitleEnUs = "Heart attack",
                            TitleUkUa = "Серцевий напад"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000066"),
                            DescriptionEnUs = "Weakness of the pumping function of the heart, leading to easy tiredness, shortness of breath, and in extreme cases - swelling of legs, kidney dysfunction, fluid accumulation in lungs (lung edema). Heart failure is classified in 4 classes (1 - slight, 4 - massive).",
                            TitleEnUs = "Heart failure",
                            TitleUkUa = "Серцева недостатність"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000067"),
                            DescriptionEnUs = "A chronic disease of the liver leading to loss-of-function due to long-term damage",
                            TitleEnUs = "Cirrhosis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000068"),
                            DescriptionEnUs = "An increased fat amount in the liver.",
                            TitleEnUs = "Fat liver"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000069"),
                            DescriptionEnUs = "A chronic liver inflammation due to a viral infection that has not healed - in most cases hepatitis B and C.",
                            TitleEnUs = "Hepatitis viral"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000070"),
                            DescriptionEnUs = "The gall bladder is 8-10 cm (3-4 in) long organ, collecting bile and placed on the backside of the liver. In many people, the bile aggregates in smaller or larger stone-like structures, which can remain without complaints or produce serious problems. The bile is a key factor for fat digestion and is excreted from the gall bladder into the bile duct and in the small bowel.",
                            TitleEnUs = "Gallstones"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000071"),
                            DescriptionEnUs = "A chronic liver inflammation due to causes other than infection.",
                            TitleEnUs = "Hepatitis other"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000072"),
                            DescriptionEnUs = "A chronic liver inflammation due to causes other than infection.",
                            TitleEnUs = "Anemia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000073"),
                            DescriptionEnUs = "Cholesterol is one the most important components of our cell membranes. It is an essential building block of the body. Human body can produce cholesterol by itself and import it from the food too. Too high blood cholesterol levels contribute to advanced atherosclerosis (narrowing of blood vessels) and strongly increases the risk of heart attack and stroke.",
                            TitleEnUs = "High cholesterol"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000074"),
                            DescriptionEnUs = "After damage of tissues (e.g. cuts), bleeding is rapidly stopped by the clotting ability of blood. In some cases, however, clotting can be stronger than needed (e.g. mutations, medicines, smoking), which elevates the risk of thrombosis (blood vessel obstruction). This can cause stroke, heart attack and other diseases.",
                            TitleEnUs = "Blood clots"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000075"),
                            DescriptionEnUs = "One of the most complex organs of the body, directly associated with out thinking ability. It weighs 1.2-1.5 kg (2.5-3 lbs), as differences do not correlate with intellect and/or other abilities. It is positioned in the skull cavity, where the bones protect it from damage. It comprizes two halves and multiple folds, builing its cortex. The cortex contains defined areas, associated with vision, sensation, hearing, taste, movement and others. The brain is supplied with blood through four major vessels - two large internal carotid arteries and two smaller vertebral arteries. Disruption of the blood supply of the brain leads to tissue damage called \"stroke\".",
                            TitleEnUs = "Brain"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000076"),
                            DescriptionEnUs = "The blood is a fluid tissue, running through our blood vessels (arteries and veins) and transporting oxygen, carbon dioxide and all necessary nutrients through the body. The blood is created in the bone marrow in the core of the bones. Any form of disruption of the blood supply may be fatal for the tissues/organs. Its red color is due to the pigment hem in the protein hemoglobin, containing iron. It fills the red blood cells and binds oxygen and carbon dioxide, allowing exchange of gasses through the body. The lymphatic system is another form of vessel system. Its vessels are much smaller and thinner. The lymphatic system drains colourless fluid (lymph) from the organs and tissues, transporting it to the lymph nodes and then to the veins. Contrary to the blood vessels, lymph vessels are visible only under microscope. Lymph nodes and lymph organs - spleen, thymus and some other - are crucially important as immune system organs, where most of the immune cells reside.",
                            TitleEnUs = "Leukemia and lymphoma"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000077"),
                            DescriptionEnUs = "A 15-25 cm (6-10 in) long soft organ, positioned exactly behind the stomach in the abdomen. It has two major fiunctions - firstly, it releases enzymes in the duodenum (the first part of the small intestine (small bowel)) that digest fats and proteins from the food. Secondly, the pancreas releases insulin, which enables glucose (HYPERLINK link to glucose) intake by the cells.",
                            TitleEnUs = "Pancreas"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000078"),
                            DescriptionEnUs = "A 1-1.5 kg (2-3 lbs) organ, positioned under the right rib arc in the abdomen. It removes multiple toxic substances, supports digestion of fats, metabolizes some medicines and is one of the most active organs of our body.",
                            TitleEnUs = "Liver cancer",
                            TitleUkUa = "Рак печінки"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000079"),
                            DescriptionEnUs = "After food is eaten through the mouth, it enters the oesophagus (food pipe) and reaches the stomach. The food pipe is placed between the lungs, just behind the heart. The stomach is the next food stop, here food digestion starts. From the stomach, filled up with 10% salt acid, the partially processed food is pumped into the small intestine (bowel), where it mixes with the bile and with the pancreatic juice, as the digestion of the food components. The food elements are also absorbed here. Finally, in the large bowel, the food rests are dried and packed to be released in the form of feces. The small bowel is 5-7 m long (16-23 ft), the large bowel 1.2-1.5 meters (4-5 ft).",
                            TitleEnUs = "Intestine/colon/stomach"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000080"),
                            DescriptionEnUs = "Paired organs with bean-like shape, weighing 110-170 gr. They are positioned on the back wall of abdomen, aproximately where the lowest ribs bind to spinal cord. The major function of the kidneys is to remove multiple unnecessesary products from the body into urine. Urine is collected in the urinary bladder and released during utrination. Kindeys play a key role to maintain the normal volume of fluids in the body, the level of some critical electrolytes and contribute to the regulation of blood pressure.",
                            TitleEnUs = "Kidney cancer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000081"),
                            DescriptionEnUs = "The lungs are paired organs, placed in the chest cavity. The heart is positioned between them. Both lungs are filled with air, which reaches them through the airways (trachea and bronchi). When a person breathes in, fresh air from outside fills the lungs. Here, the oxygen from the air enters the blood flow and it is further transported through the body. In exchange, carbon dioxide, produced from the tissues as a side product, is transported with the blood to the lungs and is released in the exhaled air. Inability to perform this exchange of oxygen and carbon dioxide may lead in extreme cases to suffocation.",
                            TitleEnUs = "Lung cancer",
                            TitleUkUa = "Рак легенів"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000082"),
                            DescriptionEnUs = "A chestnut-shaped gland, placed exactly under the urinary bladder and above the base of the penis in men. It is crossed through the middle by the male urethra, which transports urine from the bladder through the penis. The prostate secretes components of the sperm, important for the survival of the sperm cells.",
                            TitleEnUs = "Prostate & testicles"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000083"),
                            DescriptionEnUs = "A gland positioned on the front chest wall. Contrary to the widely spread opinion, men have breast glands as well, although they are tiny. In some rare cases of hormonal problems they can grow in men as well. Around 1% of all cases of the most common malignant disease of the breast - breast cancer, affect men.",
                            TitleBgBg = "Рак на гърдата",
                            TitleEnUs = "Breast cancer",
                            TitleUkUa = "Рак молочної залози"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000084"),
                            TitleEnUs = "Womb & cervical cancer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000085"),
                            DescriptionEnUs = "A state of absence of symptoms/disease activity of a chronic disease that cannot be cured. As a rule, in all type of cancers the medicine never speaks of a \"cured patient\", but of a \"patient in complete remission\".",
                            TitleEnUs = "Remission",
                            TitleUkUa = "Ремісія"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000086"),
                            DescriptionEnUs = "A gland on the neck, positioned in front of the air pipe (trachea) and exactly under the Adam`s apple. It has one left and one right part (lobe). It produces thyroid hormones (L-thyroxin (T4) and triiodthyronin (T3)), which function as metabolic regulators, stimulating body growth and metabolism.",
                            TitleEnUs = "Thyroid disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000087"),
                            DescriptionEnUs = "A major energy source for all tissues (and their cells) in our body is glucose. In diabetes, the function of the protein insulin (produced by the pancreas) is affected and insulin is important for glucose transport into the cells. Without insulin, cells \"swim\" in glucose, but cannot use it. When not properly treated, diabetes is accompanied with high glucose concentration in the blood.",
                            TitleEnUs = "Diabetes",
                            TitleUkUa = "Діабет"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000088"),
                            DescriptionEnUs = "An endocrine gland with triangular shape, producing cortisol, epinephrine (stress hormones) and some other. There are two of them in the body, they do not exceed 3-4 cm and they are positioned on the back of the abdomen, exactly above the upper pole of the kidney.",
                            TitleEnUs = "Adrenal disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000089"),
                            DescriptionEnUs = "A 1-1.5 kg (2-3 lbs) organ, positioned under the right rib arc in the abdomen. It removes multiple toxic substances, supports digestion of fats, metabolizes some medicines and is one of the most active organs of our body.",
                            TitleEnUs = "Liver transplantation"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000090"),
                            DescriptionEnUs = "Paired organs with bean-like shape, weighing 110-170 gr. They are positioned on the back wall of abdomen, aproximately where the lowest ribs bind to spinal cord. The major function of the kidneys is to remove multiple unnecessesary products from the body into urine. Urine is collected in the urinary bladder and released during utrination. Kindeys play a key role to maintain the normal volume of fluids in the body, the level of some critical electrolytes and contribute to the regulation of blood pressure.",
                            TitleEnUs = "Kidney transplantation"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000091"),
                            DescriptionEnUs = "Bone marrow is a soft tissue filling the cavity in the middle of each bone. It produces all forms of blood cells. In cases of blood cancers, as well as during intensive anti-cancer chemotherapy, the bone marrow can get damaged and new, external bone marrow from healthy donor will be transfered. The new bone marrow expands and replaces the old one. There are risks, associated with this procedure. During transplantation, the body remains without immune protection for several day/weeks. Further on, the new bone marrow may start attacking the tissues of the host (graft-versus-host syndrome). To avoid it, immunosuppressive therapy may be applied and it weakens the immune system.",
                            TitleEnUs = "Bone marrow transplant"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000092"),
                            DescriptionEnUs = "Allergy is an excessive immune reaction against typically harmless external substances, leading to skin rashes, running nose, sneezing, swelling. Home dust is one of th emost common allergies.",
                            TitleEnUs = "Dust",
                            TitleUkUa = "Пил"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000093"),
                            DescriptionEnUs = "Allergy is an excessive immune reaction against typically harmless external substances, leading to skin rashes, running nose, sneezing, swelling. Allergies against animals are generally specific for a certain species and to specific element of their bodies - fur, saliva. Such allergies may develop even after a period without problems.",
                            TitleEnUs = "Animals",
                            TitleUkUa = "Тварини"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000094"),
                            DescriptionEnUs = "Allergy is an excessive immune reaction against typically harmless external substances, leading to skin rashes, running nose, sneezing, swelling. Hay fever is a very common allergy, which occurs in a period of the year when specific plant blossoms - most commonly end of sprint/beginning of summer.",
                            TitleEnUs = "Hay fever"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000095"),
                            DescriptionEnUs = "Allergy is an excessive immune reaction against typically harmless external substances, leading to skin rashes, running nose, sneezing, swelling. Hay fever is a very common allergy, which occurs in a period of the year when specific plant blossoms - most commonly end of sprint/beginning of summer.",
                            TitleEnUs = "Food"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000096"),
                            DescriptionEnUs = "An autoimmune condition triggered by gluten found in multiple cereal grain and their products. Less than 1% of all people have this problem.",
                            TitleEnUs = "Gluten"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000098"),
                            TitleEnUs = "Uterus removed"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000099"),
                            TitleEnUs = "Heavy menstrual bleeding"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000100"),
                            TitleEnUs = "Menopause"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000101"),
                            TitleEnUs = "Cancer in remission"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000102"),
                            DescriptionEnUs = "Burning sensation in the chest and upper abdomen, sometimes accompanied with acid taste in the throat. Its is due to reflux of stomach acid into the food pipe.",
                            TitleEnUs = "Heartburn/reflux"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000103"),
                            DescriptionEnUs = "Reaction to lactose (milk sugar) due to the lack of a protein (enzyme) in our bowel, which helps digest the sugar. Lactose remains in the food and drags more water in the feces, leading to diarrhea. Some people may develop mild forms of lactose deficiency if not consuming milk product for a longer period of time.",
                            TitleEnUs = "Lactose intolerance"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000104"),
                            DescriptionEnUs = "An inflammation/wound of the stomach lining.",
                            TitleEnUs = "Ulcer/Gastritis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000105"),
                            TitleEnUs = "Removed (part or full) stomach or bowel"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000106"),
                            TitleEnUs = "Constipation or diarrhia"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000107"),
                            DescriptionEnUs = "An inflammation/wound of the stomach lining.",
                            TitleEnUs = "Diverticulitis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000108"),
                            DescriptionEnUs = "Inflammatory bowel diseases with autoimmune origin accompanied with abdominal pain, dirarhea (sometimes bloody), fever and weight loss.",
                            TitleEnUs = "Crohn's disease and ulcerative colitis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000109"),
                            DescriptionEnUs = "An abnormal growth of tissue from the wall of the bower called polyp.",
                            TitleEnUs = "Family polyposis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000110"),
                            DescriptionEnUs = "The brain is supplied with blood through four major vessels - two large internal carotid arteries and two smaller vertebral arteries. Disruption of the blood supply of the brain leads to tissue damage called \"stroke\". It might be very mild, but it can be heavy and life threatening. Depending on the vessel affected, symptoms may largely vary. They may affect movement, sensation (all forms - hearing, vison, taste, touch), speech, very often asymetrically.",
                            TitleEnUs = "Stroke",
                            TitleUkUa = "Інсульт"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000111"),
                            DescriptionEnUs = "A brain disease caused by the loss of nerve cells in substantia nigra - an area, involved in movement control. Patients develop problems performing daily tasks (e.g. shaking) and walking, which get worse with time.",
                            TitleEnUs = "Parkinson`s"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000112"),
                            DescriptionEnUs = "A group of diseases associated with continuous decrease of intellectual capacity due to loss of nerve cells. There are multiple forms - Alzheimer`s disease, vascular dementia (slow obstruction of blood vessels), Korsakoff`s syndrome (alcohol dementia) and others. Very rarely, there can be genetic background (can be inherited).",
                            TitleEnUs = "Dementia (incl. Alzheimer`s)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000113"),
                            DescriptionEnUs = "An autoimmune disease (a disease in which the body`s own immune system attacks its parts) of the brain and the spinal cord leading to damage in the white matter (the connection between neuronal cells). It leads predominantly to disturbance of movement, but can also cause sensational disturbances such as double vision and altered sense of touch. It can progress in individual attacks without symptoms in between. With time, however, permanent progressing disability may occur.",
                            TitleEnUs = "Multiple sclerosis (MS)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000114"),
                            DescriptionEnUs = "A group of diseases, associated with peripheral nerve damage - damage outside the brain and the spinal cord. It may affect movement, sensation, but also the function of some organs. The causes can be genetic, alcohol, diabetes, medication (such as chemotherapy), radiotherapy, trauma, infections and others.",
                            TitleEnUs = "Peripheral nerve disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000115"),
                            DescriptionEnUs = "The abbreviations stands for \"obsessive - compulsive disorder\". It is characterized with penetrant repetitive thoughts (obsessive thoughts) and repetitive ritual behavior (compulsive behavior).",
                            TitleEnUs = "OCD"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000116"),
                            DescriptionEnUs = "A mental disorder that is characterized with continuous low mood most of the time. It is accompanied with low self-esteem, loss of interest for most activities, low energy, sometimes physical pains without identifiable disease.",
                            TitleEnUs = "Depression",
                            TitleUkUa = "Депресія"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000117"),
                            DescriptionEnUs = "A mental disorder that is characterized with decreased ability to understand reality, often manisfetsed with altered speech and behavior. It can be associated with symptoms of some other mental disorders, which makes diagnosis very difficult. Further, it can be associated with false beliefs, hearing voices and seeing non-existent events (hallucinations). Schizophrenia is commonly mixed with \"dissociative identity disorder\" (a.k.a. multiple personality disorder). Some family predisposition can be observed in these diseases.",
                            TitleEnUs = "Psychosis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000118"),
                            DescriptionEnUs = "A mental disorder characterized with a swing between depressive episodes and anormally elevated mood.",
                            TitleEnUs = "Manic depression (bipolar disorder)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000119"),
                            DescriptionEnUs = "A.k.a. Trisomy 21. Instead of the normal 2 sets of 21th chromosome (one from the mother and one from the father), the cells of the body contain 3 sets chromosome 21. It is associated with variable levels of intellectual disability (IQ 30-70), characteristic face expression and short neck and lower height, common congenital heart defects, occasional hearing and vision problems, and other.",
                            TitleEnUs = "Down`s syndrome"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000120"),
                            DescriptionEnUs = "A genetic disorder, inherited in an recessive manner (the disorder can remain as a mutation silent for several generations), leading to a defect of a protein, allowing transport of chloride ions (and water) into digestive fluid and mucus, producing saltier sweat too. Mucus and digestive fluids become much thicker, leading to increased retention and damage in the lungs (breathing problems) and pancreas, and not so often liver and kidneys. The patients have often diminished growth and commonly recurrent lung infections.",
                            TitleEnUs = "Cystic fibrosis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000121"),
                            DescriptionEnUs = "A joint pain, swelling and redness in the joints (very common is the base of the big toe) due to accumulation of uric acid, which levels in blood are high. It occurs in people consuming a lot of sea food, meat, are overweight and/or drink alcohol.",
                            TitleEnUs = "Gout"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000122"),
                            TitleEnUs = "Other genetic disorder"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000123"),
                            TitleEnUs = "Other metabolic disorder"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000124"),
                            DescriptionEnUs = "The human immunodeficiency viruses (HIV) are retroviruses infecting human T-lymphocytes (among others). They are transmitted via blood, drung addict needles, pregnancy or sexual intercourse. HIV may stay unnoticed for a long time, but can manifest at any time with the symptoms of AIDS (acquired immunodeficiency syndrome), characterized with frequent infections by normally harmless viruses and bacteria, high cancer incidence, rare cancers (e.g. Kaposhi`s sarcoma). Successful treatment can delay or completely stop the progression into AIDS.",
                            TitleEnUs = "HIV/AIDS"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000125"),
                            DescriptionEnUs = "Here belong most of the non-specific joint complaints, which are not autoimmune, gout-related or rheuma arthririts-related.",
                            TitleEnUs = "Chronic joint pain"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000126"),
                            DescriptionEnUs = "Bone weakness and loss of bone material, leading to easier fractures, especially in the vertebra (the spinal column building blocks). Osteoporosis is often observed in seniors, but also in the course of some diseases.",
                            TitleEnUs = "Osteoporosis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000127"),
                            DescriptionEnUs = "An autoimmune disease (a disease in which the body`s own immune system attacks its parts) of the joints (most often the small joints of the hand). They are warm, swollen and painful and with time may get deformed. Affects most often seniors.",
                            TitleEnUs = "Rheumatism"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000128"),
                            DescriptionEnUs = "An autoimmune disease (a disease in which the body`s own immune system attacks its parts) of the skin leading to the formation of skin patches, which are itchy, red, dry and scaly. It can affect joints as well (rarely).",
                            TitleEnUs = "Psoriasis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000129"),
                            DescriptionEnUs = "An autoimmune disease (a disease in which the body`s own immune system attacks its parts) leading commonly to skin changes such as the specific \"butterfly rash\" around the nose. It can be mild, but also very serious in its course. It may affect various organs such as kidneys, heart, brain, can lead to swallen lymph nodes, fever, loss of hair (less common).",
                            TitleEnUs = "Lupus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000130"),
                            DescriptionEnUs = "In autoimmune diseases, the immune system attacks its own tissues. Multiple conditions are autoimmune - lupus, psoriasis, multiple sclerosis, Crohn, HUK and many more.",
                            TitleEnUs = "Other autoimmune"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000131"),
                            DescriptionEnUs = "An inflammation of the gums leading to bleeding and later on - to the gum pulling away from the tooth and eventually tooth loss.",
                            TitleEnUs = "Gum disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000132"),
                            TitleEnUs = "Falling teeth"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000133"),
                            DescriptionEnUs = "Increased eye pressure can remain asymptomatic, but can lead to glaucoma, which is a process of damage of the eye nerve and partial or complete loss of vision. The reasons for glaucoma, however, are not always related to high eye pressure.",
                            TitleEnUs = "High eye pressure & glaucoma"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000134"),
                            TitleEnUs = "Emphysema",
                            TitleUkUa = "Емфізема"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000135"),
                            TitleEnUs = "Impaired vision"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000136"),
                            TitleEnUs = "Other eye disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000137"),
                            TitleEnUs = "Hearing loss"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000138"),
                            DescriptionEnUs = "The sinus is an air-filled cavity in the bone around the nose, reducing the weight of the bone. It is connected with the nasal cavity and can get infected (sinusitis). Most offen affected by infections are the maxillary and the frontal sinuses. Not very infection of the nasal cavity leads to sinusitis.",
                            TitleEnUs = "Diseases of the nose"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000139"),
                            TitleEnUs = "Myocardial infarction"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000140"),
                            TitleEnUs = "Early myocardial infarction & stroke (<55)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000141"),
                            TitleEnUs = "Allergies",
                            TitleUkUa = "Алергія"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000142"),
                            TitleEnUs = "familial polyposis (FAP)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000143"),
                            TitleEnUs = "Genetic disorder (e.g. Down syndrome)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000144"),
                            TitleEnUs = "Breast/ovarial/tubal/peritoneal"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000145"),
                            TitleEnUs = "Stomach & intestines"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000146"),
                            TitleEnUs = "Large bowel/rectum"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000147"),
                            TitleEnUs = "Psychosis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000148"),
                            TitleEnUs = "Early dementia (<60)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000149"),
                            TitleEnUs = "BRCA1/BRCA2-mutations"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000150"),
                            TitleEnUs = "Anticancer therapy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000151"),
                            TitleEnUs = "Blood pressure therapy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000152"),
                            TitleEnUs = "Immunosuppressive/ antirejection therapy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000153"),
                            TitleEnUs = "Regular painkillers"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000154"),
                            TitleEnUs = "Anti-cholesterol pills"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000155"),
                            TitleEnUs = "Oral contraceptives"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000156"),
                            TitleEnUs = "Blood thinner"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000158"),
                            TitleEnUs = "Psychopharmaka"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000159"),
                            TitleEnUs = "Antidiabetic therapy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000160"),
                            TitleEnUs = "Therapy for heart failure"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000161"),
                            TitleEnUs = "Anti-anginose therapy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000162"),
                            TitleEnUs = "Anti-HIV therapy"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000163"),
                            TitleEnUs = "Hepatitis B (Hep B)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000164"),
                            TitleEnUs = "Polio"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000165"),
                            TitleEnUs = "Diphtheria, whooping cough (pertussis), tetanus (lockjaw) (DTaP)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000166"),
                            TitleEnUs = "H. influenzae (Hib)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000167"),
                            TitleEnUs = "Pneumococcus (PCV)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000168"),
                            TitleEnUs = "Rotavirus"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000169"),
                            TitleEnUs = "MMR (mump, measles, rubella)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000170"),
                            TitleEnUs = "Papilloma (HPV) vaccine"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000171"),
                            TitleEnUs = "Varicella (chickenpox)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000172"),
                            TitleEnUs = "Seasonal flu",
                            TitleUkUa = "Сезонний грип"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000173"),
                            TitleEnUs = "Diptheria boost"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000174"),
                            TitleEnUs = "Tetanus boost"
                        },
                        new
                        {
                            Id = new Guid("54184ed7-2407-4a70-b5ea-000000000175"),
                            TitleEnUs = "Sex at birth",
                            TitleUkUa = "Стать при народженні"
                        },
                        new
                        {
                            Id = new Guid("9e29b91e-0be0-4ea4-843e-000000000176"),
                            TitleEnUs = "Gender identity"
                        },
                        new
                        {
                            Id = new Guid("11694dcc-f84b-4224-8f4b-000000000177"),
                            TitleEnUs = "Ethnic origin"
                        },
                        new
                        {
                            Id = new Guid("a6a672c0-f79e-4c35-86ec-000000000178"),
                            TitleEnUs = "Tobacco",
                            TitleUkUa = "Куріння"
                        },
                        new
                        {
                            Id = new Guid("bb53536b-13b0-4a0b-9227-000000000179"),
                            TitleEnUs = "Diet",
                            TitleUkUa = "Дієта"
                        },
                        new
                        {
                            Id = new Guid("d0a7e9df-b2f2-492d-846c-000000000180"),
                            TitleEnUs = "Sports",
                            TitleUkUa = "Спорт"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000181"),
                            TitleEnUs = "Kidney cancer remission",
                            TitleUkUa = "Ремісія нирки"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000182"),
                            TitleEnUs = "Lung transplantation",
                            TitleUkUa = "Пересадка легенів"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000183"),
                            TitleEnUs = "Other rhythm problems",
                            TitleUkUa = "Інші проблеми з серцебиттям"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000184"),
                            TitleEnUs = "Aortic aneurism",
                            TitleUkUa = "Аневризма аорти"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000185"),
                            TitleEnUs = "Heart transplantation",
                            TitleUkUa = "Пересадка серця"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000186"),
                            TitleEnUs = "Liver cancer remission",
                            TitleUkUa = "Ремісія печінки"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000187"),
                            TitleEnUs = "Leukemia and lymphoma remission"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000188"),
                            TitleEnUs = "Addison's disease",
                            TitleUkUa = "Хвороба Едісона"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000189"),
                            TitleEnUs = "Endocrine cancer"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000190"),
                            TitleEnUs = "Endocrine cancer remission"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000191"),
                            TitleEnUs = "Pituitary disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000192"),
                            TitleEnUs = "Goiter"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000193"),
                            TitleEnUs = "Grave's disease"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000194"),
                            TitleBgBg = "Хроничен панкреатит",
                            TitleEnUs = "Chronic pancreatitis",
                            TitleUkUa = "Хронічний панкреатит"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000195"),
                            TitleEnUs = "Autism",
                            TitleUkUa = "Аутизм"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000196"),
                            TitleEnUs = "Hip joint pain/artifical hip joint"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000197"),
                            TitleEnUs = "Chronic backpain"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000198"),
                            TitleEnUs = "Prostate inflammation"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000199"),
                            TitleEnUs = "Prostate cancer",
                            TitleUkUa = "Рак простати"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000200"),
                            TitleEnUs = "Prostate cancer remission",
                            TitleUkUa = "Ремісія раку простати"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000201"),
                            TitleEnUs = "Other cancer",
                            TitleUkUa = "Інший рак"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000202"),
                            TitleEnUs = "Other cancer remission",
                            TitleUkUa = "Інша ремісія раку"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000203"),
                            TitleEnUs = "Other transplantation",
                            TitleUkUa = "Інша трансплантація"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000204"),
                            TitleEnUs = "Possible Infections",
                            TitleUkUa = "Можливі інфекції"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000206"),
                            TitleBgBg = "Лимфом",
                            TitleEnUs = "Lymphoma",
                            TitleUkUa = "Лімфома"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000211"),
                            TitleBgBg = "Диария",
                            TitleEnUs = "Diarrhea",
                            TitleUkUa = "Діарея"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000212"),
                            TitleBgBg = "Рак на червата",
                            TitleEnUs = "Bowel cancer",
                            TitleUkUa = "Рак кишечника"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000219"),
                            TitleBgBg = "Рак на панкреаса",
                            TitleEnUs = "Pancreas cancer",
                            TitleUkUa = "Рак підшлункової залози"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000220"),
                            TitleBgBg = "Рак на стомаха",
                            TitleEnUs = "Stomach cancer",
                            TitleUkUa = "Рак шлунку"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000223"),
                            TitleBgBg = "Храносмилателен рак в ремисия",
                            TitleEnUs = "Digestive cancer in remission",
                            TitleUkUa = "Рак травлення в стані ремісії"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000226"),
                            TitleBgBg = "Рак на маточната шийка",
                            TitleEnUs = "Cervical cancer",
                            TitleUkUa = "Рак шийки матки"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000227"),
                            TitleBgBg = "Рак на мозъка при възрастни",
                            TitleEnUs = "Adult brain cancer",
                            TitleUkUa = "Рак головного мозку у дорослих"
                        },
                        new
                        {
                            Id = new Guid("ddba30ae-2923-4dfa-bcb8-000000000228"),
                            OriginalEntryId = "39748AD2-86D4-489E-8BD1-000000000229",
                            TitleBgBg = "Кръвна група",
                            TitleEnUs = "Blood group",
                            TitleUkUa = "Група крові"
                        },
                        new
                        {
                            Id = new Guid("ddba30ae-2923-4dfa-bcb8-000000000230"),
                            TitleBgBg = "Rh фактор",
                            TitleEnUs = "Rh factor",
                            TitleUkUa = "Rh фактор"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            TitleEnUs = "aches"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            TitleEnUs = "chills"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            TitleEnUs = "cough"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            TitleEnUs = "fatigue"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            TitleEnUs = "fever"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            TitleEnUs = "headache"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            TitleEnUs = "sneezing"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            TitleEnUs = "sore throat"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            TitleEnUs = "stuffy nose"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            TitleEnUs = "Low Appetite"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            DescriptionEnUs = "Test description",
                            TitleEnUs = "FemaleDiagnosis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            DescriptionEnUs = "Test description",
                            TitleEnUs = "FemalePregnantDiagnosis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            DescriptionEnUs = "Test description",
                            TitleEnUs = "MaleDiagnosis"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            DescriptionEnUs = "Test description",
                            TitleEnUs = "DiagnosisTest"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            DescriptionEnUs = "Test description",
                            TitleEnUs = "DiagnosisRange"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Alanine transaminase"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Albumin (serum)"
                        },
                        new
                        {
                            Id = new Guid("4ad3abdf-92f7-471c-8d41-000000000018"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Alcohol"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Blood pressure (diastolic)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Blood pressure (systolic)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Body mass index"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Body temperature"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Gamma-glutamyl transpeptidase"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Glucose"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Heart rate (resting)"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Height"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Hip circumference"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Waist circumference"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Waist-to-height ratio"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Weight"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Smoking"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            DescriptionEnUs = "...",
                            TitleEnUs = "Timeline"
                        });
                });

            modelBuilder.Entity("Backend.Entities.ExceptionLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message");

                    b.Property<string>("Source");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.Property<Guid?>("UserId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExceptionLog");
                });

            modelBuilder.Entity("Backend.Entities.FamilyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<Guid>("EncyclopediaId");

                    b.Property<float>("HealthIndexAmount");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EncyclopediaId");

                    b.ToTable("FamilyHistory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000065"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000110"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000140"),
                            HealthIndexAmount = 4f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Category = 1,
                            EncyclopediaId = new Guid("667fe927-8c24-4b3b-b4df-000000000608"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000063"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000109"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000143"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000087"),
                            HealthIndexAmount = 3f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000144"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000076"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000120"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000082"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000081"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000227"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000212"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000053"),
                            HealthIndexAmount = 0f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000116"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000118"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000148"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000149"),
                            HealthIndexAmount = 2f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Category = 2,
                            EncyclopediaId = new Guid("8d55f4fe-8346-4705-ad1c-000000006783"),
                            HealthIndexAmount = 1f
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Category = 3,
                            EncyclopediaId = new Guid("70f4b785-e6b6-4a24-9dcf-000000001276"),
                            HealthIndexAmount = 2f
                        });
                });

            modelBuilder.Entity("Backend.Entities.FitFortisChart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Chart");
                });

            modelBuilder.Entity("Backend.Entities.Metric", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(128);

                    b.Property<int>("ConversionType");

                    b.Property<string>("DefaultAreaFillOpacity");

                    b.Property<string>("DefaultBackgroundColor");

                    b.Property<string>("DefaultBackgroundImage");

                    b.Property<float?>("DefaultGoal");

                    b.Property<float?>("DefaultGoalMax");

                    b.Property<float?>("DefaultGoalMin");

                    b.Property<string>("DefaultStroke");

                    b.Property<string>("DefaultYMax")
                        .HasMaxLength(128);

                    b.Property<string>("DefaultYMin")
                        .HasMaxLength(128);

                    b.Property<Guid?>("EncyclopediaId");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type");

                    b.Property<string>("UnitBgBg")
                        .HasMaxLength(128);

                    b.Property<string>("UnitBgBgConversionToSi");

                    b.Property<string>("UnitEn");

                    b.Property<string>("UnitEnConversionToSi");

                    b.Property<string>("UnitEnUs")
                        .HasMaxLength(128);

                    b.Property<string>("UnitEnUsConversionToSi");

                    b.Property<string>("UnitSi");

                    b.Property<string>("UnitUkUa")
                        .HasMaxLength(128);

                    b.Property<string>("UnitUkUaConversionToSi");

                    b.HasKey("Id");

                    b.HasIndex("EncyclopediaId");

                    b.ToTable("Metric");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Code = "ALT, SGPT, GPT",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultBackgroundColor = "#7136CE07",
                            DefaultBackgroundImage = "linear-gradient(#7136CE77, #7136CE07)",
                            DefaultStroke = "#7136CE",
                            DefaultYMax = "45",
                            DefaultYMin = "5",
                            EncyclopediaId = new Guid("bb9a61c0-89ae-4832-93c5-000000004033"),
                            Type = 3,
                            UnitBgBg = "IU/L",
                            UnitBgBgConversionToSi = "0.0167",
                            UnitEn = "IU/L",
                            UnitEnConversionToSi = "0.0167",
                            UnitEnUs = "IU/L",
                            UnitEnUsConversionToSi = "0.0167",
                            UnitSi = "µkat/L",
                            UnitUkUa = "IU/L",
                            UnitUkUaConversionToSi = "0.0167"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Code = "Alb",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultStroke = "#f31f38",
                            DefaultYMax = "5",
                            DefaultYMin = "3.5",
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000017"),
                            Type = 3,
                            UnitBgBg = "g/dL",
                            UnitBgBgConversionToSi = "10",
                            UnitEn = "g/dL",
                            UnitEnConversionToSi = "10",
                            UnitEnUs = "g/dL",
                            UnitEnUsConversionToSi = "10",
                            UnitSi = "g/L",
                            UnitUkUa = "g/dL",
                            UnitUkUaConversionToSi = "10"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Code = "BP-dia",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultStroke = "#f31f38",
                            DefaultYMax = "80",
                            DefaultYMin = "0",
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000019"),
                            Type = 3,
                            UnitBgBg = "mm Hg",
                            UnitBgBgConversionToSi = "0.133",
                            UnitEn = "mm Hg",
                            UnitEnConversionToSi = "0.133",
                            UnitEnUs = "mm Hg",
                            UnitEnUsConversionToSi = "0.133",
                            UnitSi = "kPa",
                            UnitUkUa = "mm Hg",
                            UnitUkUaConversionToSi = "0.133"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Code = "BP-sys",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultStroke = "#f31f38",
                            DefaultYMax = "120",
                            DefaultYMin = "0",
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000020"),
                            Type = 3,
                            UnitBgBg = "mm Hg",
                            UnitBgBgConversionToSi = "0.133",
                            UnitEn = "mm Hg",
                            UnitEnConversionToSi = "0.133",
                            UnitEnUs = "mm Hg",
                            UnitEnUsConversionToSi = "0.133",
                            UnitSi = "kPa",
                            UnitUkUa = "mm Hg",
                            UnitUkUaConversionToSi = "0.133"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Code = "BMI",
                            ConversionType = 0,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultStroke = "#8884d8",
                            DefaultYMax = "25",
                            DefaultYMin = "18.5",
                            EncyclopediaId = new Guid("22aba90c-501c-48c2-54f2-08d77e21eb9f"),
                            Type = 3,
                            UnitBgBg = "kg/m2",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "kg/m2",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "kg/m2",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "kg/m2",
                            UnitUkUa = "кг/м2",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Code = "",
                            ConversionType = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000022"),
                            Type = 3,
                            UnitBgBg = "°C",
                            UnitBgBgConversionToSi = "C",
                            UnitEn = "°C",
                            UnitEnConversionToSi = "C",
                            UnitEnUs = "°F",
                            UnitEnUsConversionToSi = "F",
                            UnitSi = "K",
                            UnitUkUa = "°C",
                            UnitUkUaConversionToSi = "C"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Code = "Glu",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultBackgroundColor = "#ff656507",
                            DefaultBackgroundImage = "linear-gradient(#ff656577, #ff656507)",
                            DefaultStroke = "#ff6565",
                            DefaultYMax = "dataMax+10",
                            DefaultYMin = "dataMin-10",
                            EncyclopediaId = new Guid("a1a4619b-c41b-4b2d-54e0-08d77e21eb9f"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mg/dL",
                            UnitEnConversionToSi = "0.0555",
                            UnitEnUs = "mg/dL",
                            UnitEnUsConversionToSi = "0.0555",
                            UnitSi = "mmol/L",
                            UnitUkUa = "мг/дл",
                            UnitUkUaConversionToSi = "0.0555"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Code = "",
                            ConversionType = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000025"),
                            Type = 3,
                            UnitBgBg = "/min",
                            UnitBgBgConversionToSi = "0.133",
                            UnitEn = "bpm",
                            UnitEnConversionToSi = "0.133",
                            UnitEnUs = "bpm",
                            UnitEnUsConversionToSi = "0.133",
                            UnitSi = "bps",
                            UnitUkUa = "/хв",
                            UnitUkUaConversionToSi = "0.133"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Code = "",
                            ConversionType = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000027"),
                            Type = 3,
                            UnitBgBg = "cm",
                            UnitBgBgConversionToSi = "0.01",
                            UnitEn = "cm",
                            UnitEnConversionToSi = "0.01",
                            UnitEnUs = "in",
                            UnitEnUsConversionToSi = "0.0254",
                            UnitSi = "m",
                            UnitUkUa = "см",
                            UnitUkUaConversionToSi = "0.01"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Code = "",
                            ConversionType = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000028"),
                            Type = 3,
                            UnitBgBg = "cm",
                            UnitBgBgConversionToSi = "0.01",
                            UnitEn = "cm",
                            UnitEnConversionToSi = "0.01",
                            UnitEnUs = "in",
                            UnitEnUsConversionToSi = "0.0254",
                            UnitSi = "m",
                            UnitUkUa = "см",
                            UnitUkUaConversionToSi = "0.01"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Code = "Weight",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultBackgroundColor = "#8884d807",
                            DefaultBackgroundImage = "linear-gradient(#8884d877, #8884d807)",
                            DefaultStroke = "#8884d8",
                            DefaultYMax = "dataMax+2",
                            DefaultYMin = "dataMin-2",
                            EncyclopediaId = new Guid("660db627-f234-4a35-5508-08d77e21eb9f"),
                            Type = 3,
                            UnitBgBg = "kg",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "kg",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "lbs",
                            UnitEnUsConversionToSi = "0.453592",
                            UnitSi = "Kg",
                            UnitUkUa = "кг",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Code = "Timeline",
                            ConversionType = 0,
                            DefaultStroke = "#335889",
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000032"),
                            Type = 0,
                            UnitBgBg = "#",
                            UnitEnUs = "#",
                            UnitUkUa = "#"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Code = "",
                            ConversionType = 0,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000204"),
                            Type = 3,
                            UnitBgBg = "#",
                            UnitEnUs = "#",
                            UnitUkUa = "#"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            Code = "Stress",
                            ConversionType = 0,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("8cc94312-6f08-4915-b2fc-000000002432"),
                            Type = 3,
                            UnitBgBg = "#",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "#",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "#",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "#",
                            UnitUkUa = "#",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            Code = "Non-HDL cholesterol",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 130f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("bfebe005-04fc-4ffa-a8e4-000000009582"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mg/dL",
                            UnitEnConversionToSi = "0.0555",
                            UnitEnUs = "mg/dL",
                            UnitEnUsConversionToSi = "0.0555",
                            UnitSi = "mmol/L",
                            UnitUkUa = "мг/дл",
                            UnitUkUaConversionToSi = "0.0555"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            Code = "Cholesterol (total)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 200f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("8fd1c6da-3942-4b6b-bfe8-000000000073"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mg/dL",
                            UnitEnConversionToSi = "0.0555",
                            UnitEnUs = "mg/dL",
                            UnitEnUsConversionToSi = "0.0555",
                            UnitSi = "mmol/L",
                            UnitUkUa = "мг/дл",
                            UnitUkUaConversionToSi = "0.0555"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            Code = "Triglycerides",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 150f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("85c89921-80e9-4e97-8314-000000008310"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mg/dL",
                            UnitEnConversionToSi = "0.0555",
                            UnitEnUs = "mg/dL",
                            UnitEnUsConversionToSi = "0.0555",
                            UnitSi = "mmol/L",
                            UnitUkUa = "мг/дл",
                            UnitUkUaConversionToSi = "0.0555"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            Code = "BUN (blood urea nitrogen)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 25f,
                            DefaultGoalMin = 7f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("c8a0f11a-67a5-4237-a372-000000009581"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mg/dL",
                            UnitEnConversionToSi = "0.0555",
                            UnitEnUs = "mg/dL",
                            UnitEnUsConversionToSi = "0.0555",
                            UnitSi = "mmol/L",
                            UnitUkUa = "мг/дл",
                            UnitUkUaConversionToSi = "0.0555"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            Code = "eGFR",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMin = 60f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("753cfe34-3110-4cac-ba3d-000000004034"),
                            Type = 2,
                            UnitBgBg = "ml/min/1.73m2",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "ml/min/1.73m2",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "ml/min/1.73m2",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "ml/min/1.73m2",
                            UnitUkUa = "ml/min/1.73m2",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            Code = "Sodium (blood)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 146f,
                            DefaultGoalMin = 135f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("24f2ef2f-2373-4702-8c27-000000010321"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mmol/L",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "mmol/L",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "mmol/L",
                            UnitUkUa = "mmol/L",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            Code = "Potassium (blood)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 5.3f,
                            DefaultGoalMin = 3.5f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("adc5c7a6-3bce-4350-a085-000000010221"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mmol/L",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "mmol/L",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "mmol/L",
                            UnitUkUa = "mmol/L",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            Code = "Chloride (blood)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 110f,
                            DefaultGoalMin = 98f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("9d929bac-05e6-4efd-a38b-000000009675"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mmol/L",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "mmol/L",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "mmol/L",
                            UnitUkUa = "mmol/L",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            Code = "Calcium (blood)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 10.3f,
                            DefaultGoalMin = 8.6f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("166e232e-a4f1-4fec-b00a-000000009617"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mmol/L",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "mmol/L",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "mmol/L",
                            UnitUkUa = "mmol/L",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000034"),
                            Code = "Total protein (blood)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 8.1f,
                            DefaultGoalMin = 6.1f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("afb991ea-3f5b-4db8-be39-000000009844"),
                            Type = 2,
                            UnitBgBg = "g/dL",
                            UnitBgBgConversionToSi = "10",
                            UnitEn = "g/dL",
                            UnitEnConversionToSi = "10",
                            UnitEnUs = "g/dL",
                            UnitEnUsConversionToSi = "10",
                            UnitSi = "g/L",
                            UnitUkUa = "g/dL",
                            UnitUkUaConversionToSi = "10"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000035"),
                            Code = "Globulin (blood)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 5.1f,
                            DefaultGoalMin = 3.6f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("e9e98c5b-0fba-4784-a8eb-000000009842"),
                            Type = 2,
                            UnitBgBg = "g/dL",
                            UnitBgBgConversionToSi = "10",
                            UnitEn = "g/dL",
                            UnitEnConversionToSi = "10",
                            UnitEnUs = "g/dL",
                            UnitEnUsConversionToSi = "10",
                            UnitSi = "g/L",
                            UnitUkUa = "g/dL",
                            UnitUkUaConversionToSi = "10"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000036"),
                            Code = "Bilirubin (total)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 1.2f,
                            DefaultGoalMin = 0.2f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("9c799dc4-1aa9-4a85-a7d8-000000004674"),
                            Type = 2,
                            UnitBgBg = "µmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mg/dL",
                            UnitEnConversionToSi = "17.104",
                            UnitEnUs = "mg/dL",
                            UnitEnUsConversionToSi = "17.104",
                            UnitSi = "µmol/L",
                            UnitUkUa = "мг/дл",
                            UnitUkUaConversionToSi = "17.104"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000037"),
                            Code = "Alkaline phosphatase (AP)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 130f,
                            DefaultGoalMin = 36f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("3ccd9064-93a0-411c-a21b-000000010066"),
                            Type = 2,
                            UnitBgBg = "U/L",
                            UnitBgBgConversionToSi = "0.0167",
                            UnitEn = "U/L",
                            UnitEnConversionToSi = "0.0167",
                            UnitEnUs = "U/L",
                            UnitEnUsConversionToSi = "0.0167",
                            UnitSi = "µkat/L",
                            UnitUkUa = "U/L",
                            UnitUkUaConversionToSi = "0.0167"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000038"),
                            Code = "Lactate dehydrogenase (LDH, total)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 280f,
                            DefaultGoalMin = 140f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("4372dcc8-af1e-4347-8fec-000000010481"),
                            Type = 2,
                            UnitBgBg = "U/L",
                            UnitBgBgConversionToSi = "0.0167",
                            UnitEn = "U/L",
                            UnitEnConversionToSi = "0.0167",
                            UnitEnUs = "U/L",
                            UnitEnUsConversionToSi = "0.0167",
                            UnitSi = "µkat/L",
                            UnitUkUa = "U/L",
                            UnitUkUaConversionToSi = "0.0167"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000039"),
                            Code = "AST, GOT",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 40f,
                            DefaultGoalMin = 10f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("c3e49b97-8eb6-4e0d-a269-000000004071"),
                            Type = 2,
                            UnitBgBg = "U/L",
                            UnitBgBgConversionToSi = "0.0167",
                            UnitEn = "U/L",
                            UnitEnConversionToSi = "0.0167",
                            UnitEnUs = "U/L",
                            UnitEnUsConversionToSi = "0.0167",
                            UnitSi = "µkat/L",
                            UnitUkUa = "U/L",
                            UnitUkUaConversionToSi = "0.0167"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000040"),
                            Code = "Hemoglobin (Hb)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 17.1f,
                            DefaultGoalMin = 13.2f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("d6294076-bca1-45be-a7d4-000000009884"),
                            Type = 2,
                            UnitBgBg = "g/dL",
                            UnitBgBgConversionToSi = "10",
                            UnitEn = "g/dL",
                            UnitEnConversionToSi = "10",
                            UnitEnUs = "g/dL",
                            UnitEnUsConversionToSi = "10",
                            UnitSi = "g/L",
                            UnitUkUa = "g/dL",
                            UnitUkUaConversionToSi = "10"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000041"),
                            Code = "Hematocrit (Hct)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 50f,
                            DefaultGoalMin = 38f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("cd67cdaa-3fb3-49fa-bd23-000000009878"),
                            Type = 2,
                            UnitBgBg = "%",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "%",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "%",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "%",
                            UnitUkUa = "%",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000042"),
                            Code = "WBC",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 10.8f,
                            DefaultGoalMin = 3.8f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("f586b7ca-adea-45bf-8d90-000000001396"),
                            Type = 2,
                            UnitBgBg = "thousand/µL",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "thousand/µL",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "thousand/µL",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "thousand/µL",
                            UnitUkUa = "thousand/µL",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000043"),
                            Code = "RBC",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 5.8f,
                            DefaultGoalMin = 4f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("f2cf0070-d89d-44bf-85b5-000000001398"),
                            Type = 2,
                            UnitBgBg = "thousand/µL",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "thousand/µL",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "thousand/µL",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "thousand/µL",
                            UnitUkUa = "thousand/µL",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000044"),
                            Code = "Platelets",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 400f,
                            DefaultGoalMin = 140f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("68a70f3d-05ee-483a-ab9c-000000001401"),
                            Type = 2,
                            UnitBgBg = "thousand/µL",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "thousand/µL",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "thousand/µL",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "thousand/µL",
                            UnitUkUa = "thousand/µL",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000045"),
                            Code = "Neutrophil count, absolute",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 7800f,
                            DefaultGoalMin = 1500f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("e7081c58-9b44-41ea-99df-000000001397"),
                            Type = 2,
                            UnitBgBg = "cells/µL",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "cells/µL",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "cells/µL",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "cells/µL",
                            UnitUkUa = "cells/µL",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000046"),
                            Code = "Lymphocyte count, absolute",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 3900f,
                            DefaultGoalMin = 850f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("51ca65ae-ec19-4401-9527-000000011251"),
                            Type = 2,
                            UnitBgBg = "cells/µL",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "cells/µL",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "cells/µL",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "cells/µL",
                            UnitUkUa = "cells/µL",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000047"),
                            Code = "Monocyte count, absolute",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 950f,
                            DefaultGoalMin = 200f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("6dd63601-73c3-4a02-b970-000000011257"),
                            Type = 2,
                            UnitBgBg = "cells/µL",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "cells/µL",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "cells/µL",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "cells/µL",
                            UnitUkUa = "cells/µL",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000048"),
                            Code = "Eosinophil count, absolute",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 500f,
                            DefaultGoalMin = 15f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("914190e6-da67-4857-ba38-000000011258"),
                            Type = 2,
                            UnitBgBg = "cells/µL",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "cells/µL",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "cells/µL",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "cells/µL",
                            UnitUkUa = "cells/µL",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000049"),
                            Code = "Basophil count, absolute",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 200f,
                            DefaultGoalMin = 0f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("7be2a744-938e-41c8-aba4-000000011259"),
                            Type = 2,
                            UnitBgBg = "cells/µL",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "cells/µL",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "cells/µL",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "cells/µL",
                            UnitUkUa = "cells/µL",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000050"),
                            Code = "Mean RBC volume (MCV)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 100f,
                            DefaultGoalMin = 80f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("c578d319-d56e-48a7-9eaf-000000011275"),
                            Type = 2,
                            UnitBgBg = "fL",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "fL",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "fL",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "fL",
                            UnitUkUa = "fL",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000051"),
                            Code = "Mean RBC iron (MCH)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 33f,
                            DefaultGoalMin = 27f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("0cee22f2-90da-45b8-b5e0-000000011276"),
                            Type = 2,
                            UnitBgBg = "pg",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "pg",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "pg",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "pg",
                            UnitUkUa = "pg",
                            UnitUkUaConversionToSi = "1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000052"),
                            Code = "Mean RBC iron concentration (MCHC)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 36f,
                            DefaultGoalMin = 32f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("2d825e7a-d13c-4ccb-8aef-000000011279"),
                            Type = 2,
                            UnitBgBg = "g/dL",
                            UnitBgBgConversionToSi = "10",
                            UnitEn = "g/dL",
                            UnitEnConversionToSi = "10",
                            UnitEnUs = "g/dL",
                            UnitEnUsConversionToSi = "10",
                            UnitSi = "g/L",
                            UnitUkUa = "g/dL",
                            UnitUkUaConversionToSi = "10"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000053"),
                            Code = "Uric acid (blood)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 8f,
                            DefaultGoalMin = 4f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("0df5be63-df25-4b8c-9216-000000010402"),
                            Type = 2,
                            UnitBgBg = "mmol/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mg/dL",
                            UnitEnConversionToSi = "0.0595",
                            UnitEnUs = "mg/dL",
                            UnitEnUsConversionToSi = "0.0595",
                            UnitSi = "mmol/L",
                            UnitUkUa = "mg/dL",
                            UnitUkUaConversionToSi = "0.0595"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000054"),
                            Code = "hs-CRP (high sensitivity CRP)",
                            ConversionType = 1,
                            DefaultAreaFillOpacity = "0.2",
                            DefaultGoalMax = 1f,
                            DefaultStroke = "#722ED1",
                            EncyclopediaId = new Guid("2d825e7a-d13c-4ccb-8aef-000000011279"),
                            Type = 2,
                            UnitBgBg = "mg/L",
                            UnitBgBgConversionToSi = "1",
                            UnitEn = "mg/L",
                            UnitEnConversionToSi = "1",
                            UnitEnUs = "mg/L",
                            UnitEnUsConversionToSi = "1",
                            UnitSi = "mg/L",
                            UnitUkUa = "mg/L",
                            UnitUkUaConversionToSi = "1"
                        });
                });

            modelBuilder.Entity("Backend.Entities.MetricData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DoctorVisitComments");

                    b.Property<float?>("DoctorVisits");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("LabResults");

                    b.Property<string>("LabResultsComments");

                    b.Property<float?>("Measurements");

                    b.Property<Guid>("MetricId");

                    b.Property<float?>("RangeMax");

                    b.Property<float?>("RangeMin");

                    b.Property<Guid>("UserId");

                    b.Property<float?>("Value");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.HasIndex("UserId");

                    b.ToTable("MetricData");
                });

            modelBuilder.Entity("Backend.Entities.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("DescriptionBgBg");

                    b.Property<string>("DescriptionEn");

                    b.Property<string>("DescriptionEnUs");

                    b.Property<string>("DescriptionUkUa");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language");

                    b.Property<Guid?>("PictureId");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("TitleBgBg");

                    b.Property<string>("TitleEn");

                    b.Property<string>("TitleEnUs");

                    b.Property<string>("TitleUkUa");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Backend.Entities.NewsLikesAndComments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NewsId");

                    b.Property<int>("Type");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsLikesAndComments");
                });

            modelBuilder.Entity("Backend.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Backend.Entities.SearchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsSuccessful");

                    b.Property<Guid?>("LinkedEntityId");

                    b.Property<int>("SearchArea");

                    b.Property<string>("SearchText");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchRequest");
                });

            modelBuilder.Entity("Backend.Entities.SymptomChecker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApplicableToFemale");

                    b.Property<bool>("ApplicableToFemalePregnant");

                    b.Property<bool>("ApplicableToMale");

                    b.Property<Guid?>("EncyclopediaEntryPossibleCauseOrDiagnosisId");

                    b.Property<Guid?>("EncyclopediaEntrySymptomId");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxAgeOfApplicability");

                    b.Property<int>("MinAgeOfApplicability");

                    b.HasKey("Id");

                    b.HasIndex("EncyclopediaEntryPossibleCauseOrDiagnosisId");

                    b.HasIndex("EncyclopediaEntrySymptomId");

                    b.ToTable("SymptomChecker");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ApplicableToFemale = true,
                            ApplicableToFemalePregnant = false,
                            ApplicableToMale = false,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000011"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000009"),
                            MaxAgeOfApplicability = 1000,
                            MinAgeOfApplicability = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ApplicableToFemale = true,
                            ApplicableToFemalePregnant = false,
                            ApplicableToMale = false,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000011"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000008"),
                            MaxAgeOfApplicability = 1000,
                            MinAgeOfApplicability = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ApplicableToFemale = false,
                            ApplicableToFemalePregnant = true,
                            ApplicableToMale = false,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000012"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000009"),
                            MaxAgeOfApplicability = 50,
                            MinAgeOfApplicability = 20
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ApplicableToFemale = false,
                            ApplicableToFemalePregnant = false,
                            ApplicableToMale = true,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000013"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000009"),
                            MaxAgeOfApplicability = 1000,
                            MinAgeOfApplicability = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            ApplicableToFemale = false,
                            ApplicableToFemalePregnant = false,
                            ApplicableToMale = true,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000013"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000002"),
                            MaxAgeOfApplicability = 1000,
                            MinAgeOfApplicability = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            ApplicableToFemale = true,
                            ApplicableToFemalePregnant = true,
                            ApplicableToMale = false,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000014"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000004"),
                            MaxAgeOfApplicability = 40,
                            MinAgeOfApplicability = 30
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            ApplicableToFemale = true,
                            ApplicableToFemalePregnant = true,
                            ApplicableToMale = false,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000014"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000005"),
                            MaxAgeOfApplicability = 40,
                            MinAgeOfApplicability = 30
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            ApplicableToFemale = false,
                            ApplicableToFemalePregnant = false,
                            ApplicableToMale = true,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000014"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000007"),
                            MaxAgeOfApplicability = 70,
                            MinAgeOfApplicability = 20
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            ApplicableToFemale = false,
                            ApplicableToFemalePregnant = false,
                            ApplicableToMale = true,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000014"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000008"),
                            MaxAgeOfApplicability = 70,
                            MinAgeOfApplicability = 20
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            ApplicableToFemale = false,
                            ApplicableToFemalePregnant = false,
                            ApplicableToMale = true,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000014"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000001"),
                            MaxAgeOfApplicability = 70,
                            MinAgeOfApplicability = 20
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            ApplicableToFemale = true,
                            ApplicableToFemalePregnant = true,
                            ApplicableToMale = false,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000015"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000001"),
                            MaxAgeOfApplicability = 50,
                            MinAgeOfApplicability = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            ApplicableToFemale = true,
                            ApplicableToFemalePregnant = true,
                            ApplicableToMale = false,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000015"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000006"),
                            MaxAgeOfApplicability = 50,
                            MinAgeOfApplicability = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            ApplicableToFemale = true,
                            ApplicableToFemalePregnant = true,
                            ApplicableToMale = false,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000015"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000008"),
                            MaxAgeOfApplicability = 50,
                            MinAgeOfApplicability = 0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            ApplicableToFemale = true,
                            ApplicableToFemalePregnant = true,
                            ApplicableToMale = false,
                            EncyclopediaEntryPossibleCauseOrDiagnosisId = new Guid("00000000-0000-0000-0000-000000000015"),
                            EncyclopediaEntrySymptomId = new Guid("00000000-0000-0000-0000-000000000002"),
                            MaxAgeOfApplicability = 50,
                            MinAgeOfApplicability = 0
                        });
                });

            modelBuilder.Entity("Backend.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("Alcohol");

                    b.Property<Guid?>("AvatarId");

                    b.Property<int>("BiologicalChildren");

                    b.Property<int?>("BloodGroup");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreateAccountDate");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<int?>("Diet");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime?>("EmailConfirmedDate");

                    b.Property<int?>("EthnicOrigin");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("FirstPregnancyDate");

                    b.Property<int?>("GenderIdentity");

                    b.Property<int?>("HighPromiscuity");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("LastPregnancy");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int>("NonBiologicalChildren");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("Pregnancy");

                    b.Property<DateTime?>("PregnantDueDate");

                    b.Property<DateTime?>("QuitDate");

                    b.Property<int?>("RhFactor");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("SexAtBirth");

                    b.Property<int?>("SexualActive");

                    b.Property<int?>("Sports");

                    b.Property<int?>("TobaccoConsumption");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Backend.Entities.UserAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AlertId");

                    b.Property<bool>("Hide");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead");

                    b.Property<DateTime?>("SnoozeTill");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AlertId");

                    b.HasIndex("UserId");

                    b.ToTable("AlertAspNetUser");
                });

            modelBuilder.Entity("Backend.Entities.UserCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ChronicConditionId");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChronicConditionId");

                    b.HasIndex("UserId");

                    b.ToTable("ChronicConditionAspNetUser");
                });

            modelBuilder.Entity("Backend.Entities.UserFamilyHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<Guid>("FamilyHistoryId");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FamilyHistoryId");

                    b.HasIndex("UserId");

                    b.ToTable("FamilyHistoryAspNetUser");
                });

            modelBuilder.Entity("Backend.Entities.UserVaccineTherapy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId");

                    b.Property<Guid>("VaccineTherapyId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VaccineTherapyId");

                    b.ToTable("VaccineTherapyAspNetUser");
                });

            modelBuilder.Entity("Backend.Entities.VaccineTherapy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<Guid>("EncyclopediaId");

                    b.Property<float>("HealthIndexAmount");

                    b.Property<DateTime?>("InactiveAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Recomended");

                    b.HasKey("Id");

                    b.HasIndex("EncyclopediaId");

                    b.ToTable("VaccineTherapy");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000163"),
                            HealthIndexAmount = -0.5f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000164"),
                            HealthIndexAmount = -1f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000165"),
                            HealthIndexAmount = -1f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000166"),
                            HealthIndexAmount = -0.5f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000167"),
                            HealthIndexAmount = -0.5f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000168"),
                            HealthIndexAmount = -0.3f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000169"),
                            HealthIndexAmount = -1f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000170"),
                            HealthIndexAmount = -1f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Category = 1,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000171"),
                            HealthIndexAmount = -0.5f,
                            Recomended = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000172"),
                            HealthIndexAmount = -1f,
                            Recomended = true
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000173"),
                            HealthIndexAmount = -0.3f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Category = 2,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000174"),
                            HealthIndexAmount = -0.3f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000150"),
                            HealthIndexAmount = -4f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000151"),
                            HealthIndexAmount = -3f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000152"),
                            HealthIndexAmount = -2f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000153"),
                            HealthIndexAmount = -2f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000154"),
                            HealthIndexAmount = -3f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000155"),
                            HealthIndexAmount = 1f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000156"),
                            HealthIndexAmount = -3f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000158"),
                            HealthIndexAmount = -2f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000159"),
                            HealthIndexAmount = -2f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000160"),
                            HealthIndexAmount = -2.5f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000161"),
                            HealthIndexAmount = -1.5f,
                            Recomended = false
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            Category = 3,
                            EncyclopediaId = new Guid("00000000-0000-0000-0000-000000000162"),
                            HealthIndexAmount = -3f,
                            Recomended = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Backend.Entities.AnalyticData", b =>
                {
                    b.HasOne("Backend.Entities.Analytic", "Analytic")
                        .WithMany("AnalyticData")
                        .HasForeignKey("AnalyticId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.AnalyticUserSignIn", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("AnalyticUserSignIn")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Entities.Audit", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("Audits")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Entities.ChartMetric", b =>
                {
                    b.HasOne("Backend.Entities.FitFortisChart", "Chart")
                        .WithMany("ChartMetrics")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Entities.Metric", "Metric")
                        .WithMany("ChartMetrics")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.ChronicCondition", b =>
                {
                    b.HasOne("Backend.Entities.EncyclopediaEntity", "Encyclopedia")
                        .WithMany()
                        .HasForeignKey("EncyclopediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.Document", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Entities.ExceptionLog", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("ExceptionLogs")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Entities.FamilyHistory", b =>
                {
                    b.HasOne("Backend.Entities.EncyclopediaEntity", "Encyclopedia")
                        .WithMany()
                        .HasForeignKey("EncyclopediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.FitFortisChart", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("Charts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.Metric", b =>
                {
                    b.HasOne("Backend.Entities.EncyclopediaEntity", "Encyclopedia")
                        .WithMany()
                        .HasForeignKey("EncyclopediaId");
                });

            modelBuilder.Entity("Backend.Entities.MetricData", b =>
                {
                    b.HasOne("Backend.Entities.Metric", "Metric")
                        .WithMany("MetricData")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("MetricData")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.NewsLikesAndComments", b =>
                {
                    b.HasOne("Backend.Entities.News", "News")
                        .WithMany("LikesAndComments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("LikesAndComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.SearchRequest", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("SearchRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Backend.Entities.SymptomChecker", b =>
                {
                    b.HasOne("Backend.Entities.EncyclopediaEntity", "Diagnosis")
                        .WithMany()
                        .HasForeignKey("EncyclopediaEntryPossibleCauseOrDiagnosisId");

                    b.HasOne("Backend.Entities.EncyclopediaEntity", "Symptom")
                        .WithMany()
                        .HasForeignKey("EncyclopediaEntrySymptomId");
                });

            modelBuilder.Entity("Backend.Entities.UserAlert", b =>
                {
                    b.HasOne("Backend.Entities.Alert", "Alert")
                        .WithMany("UserAlerts")
                        .HasForeignKey("AlertId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.UserCondition", b =>
                {
                    b.HasOne("Backend.Entities.ChronicCondition", "ChronicCondition")
                        .WithMany("UserConditions")
                        .HasForeignKey("ChronicConditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("UserConditions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.UserFamilyHistory", b =>
                {
                    b.HasOne("Backend.Entities.FamilyHistory", "FamilyHistory")
                        .WithMany("UserFamilyHistory")
                        .HasForeignKey("FamilyHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("UserFamilyHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.UserVaccineTherapy", b =>
                {
                    b.HasOne("Backend.Entities.User", "User")
                        .WithMany("UserVaccineTherapies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Entities.VaccineTherapy", "VaccineTherapy")
                        .WithMany()
                        .HasForeignKey("VaccineTherapyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Backend.Entities.VaccineTherapy", b =>
                {
                    b.HasOne("Backend.Entities.EncyclopediaEntity", "Encyclopedia")
                        .WithMany()
                        .HasForeignKey("EncyclopediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Backend.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Backend.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
